{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleChange","handleUpdate","handleToggle","this","removeTodo","id","setState","evt","preventDefault","updateTodo","target","name","value","toggleTodo","result","timeout","classNames","className","onSubmit","type","onChange","onClick","completed","class","Component","NewTodoForm","handleSubmit","createTodo","uuidv4","htmlFor","placeholder","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","t","updatedTask","updatedTodos","map","todo","App","ReactDOM","render","document","getElementById"],"mappings":"gWA+EeA,E,kDA1Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,WAAW,EACXC,KAAM,EAAKH,MAAMG,MAEnB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAKI,aAAe,EAAKA,aAAaJ,KAAlB,gBAVH,E,gDAYnB,WACEK,KAAKV,MAAMW,WAAWD,KAAKV,MAAMY,M,wBAEnC,WACEF,KAAKG,SAAS,CAAEX,WAAYQ,KAAKT,MAAMC,c,0BAEzC,SAAaY,GACXA,EAAIC,iBAEJL,KAAKV,MAAMgB,WAAWN,KAAKV,MAAMY,GAAIF,KAAKT,MAAME,MAChDO,KAAKG,SAAS,CAAEX,WAAW,M,0BAE7B,SAAaY,GACXJ,KAAKG,SAAL,eACGC,EAAIG,OAAOC,KAAOJ,EAAIG,OAAOE,U,0BAGlC,SAAaL,GACXJ,KAAKV,MAAMoB,WAAWV,KAAKV,MAAMY,M,oBAEnC,WACE,IAAIS,EAwBJ,OAtBEA,EADEX,KAAKT,MAAMC,UAEX,qBAAmBoB,QAAS,IAAKC,WAAW,OAA5C,SACE,uBAAMC,UAAU,iBAAiBC,SAAUf,KAAKF,aAAhD,UACE,uBACEkB,KAAK,OACLP,MAAOT,KAAKT,MAAME,KAClBe,KAAK,OACLS,SAAUjB,KAAKH,eAEjB,8CARK,WAcT,qBAAkBe,QAAS,IAAKC,WAAW,YAA3C,SACE,oBAAIC,UAAU,YAAYI,QAASlB,KAAKD,aAAxC,SACGC,KAAKV,MAAMG,QAFP,UAQX,sBACEqB,UAAWd,KAAKV,MAAM6B,UAAY,iBAAmB,OADvD,UAGGR,EACD,sBAAKG,UAAU,eAAf,UACE,wBAAQI,QAASlB,KAAKJ,WAAtB,SACE,mBAAGwB,MAAM,iBAEX,wBAAQF,QAASlB,KAAKN,aAAtB,SACE,mBAAG0B,MAAM,6B,GApEFC,a,QCoCJC,G,wDAjCb,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEE,KAAM,IACrB,EAAKI,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAK4B,aAAe,EAAKA,aAAa5B,KAAlB,gBAJH,E,gDAMnB,SAAaS,GACXJ,KAAKG,SAAL,eACGC,EAAIG,OAAOC,KAAOJ,EAAIG,OAAOE,U,0BAGlC,SAAaL,GACXA,EAAIC,iBACJL,KAAKV,MAAMkC,WAAX,2BAA2BxB,KAAKT,OAAhC,IAAuCW,GAAIuB,cAAUN,WAAW,KAChEnB,KAAKG,SAAS,CAAEV,KAAM,O,oBAExB,WACE,OACE,uBAAMqB,UAAU,cAAcC,SAAUf,KAAKuB,aAA7C,UACE,uBAAOG,QAAQ,OAAf,sBACA,uBACEV,KAAK,OACLW,YAAY,WACZzB,GAAG,OACHM,KAAK,OACLC,MAAOT,KAAKT,MAAME,KAClBwB,SAAUjB,KAAKH,eAEjB,qD,GA7BkBwB,cCsEXO,G,wDAtEX,WAAYtC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTsC,MAAO,IAEX,EAAKC,OAAO,EAAKA,OAAOnC,KAAZ,gBACZ,EAAKoC,OAAO,EAAKA,OAAOpC,KAAZ,gBACZ,EAAKqC,OAAO,EAAKA,OAAOrC,KAAZ,gBACZ,EAAKsC,iBAAiB,EAAKA,iBAAiBtC,KAAtB,gBARR,E,0CAWlB,SAAOuC,GACHlC,KAAKG,SAAS,CACV0B,MAAM,GAAD,mBAAM7B,KAAKT,MAAMsC,OAAjB,CAAwBK,Q,oBAIrC,SAAOhC,GACHF,KAAKG,SAAS,CACV0B,MAAO7B,KAAKT,MAAMsC,MAAMM,QAAO,SAAAC,GAAC,OAAIA,EAAElC,KAAOA,S,oBAIrD,SAAOA,EAAImC,GACP,IAAMC,EAAetC,KAAKT,MAAMsC,MAAMU,KAAI,SAAAC,GACtC,OAAGA,EAAKtC,KAAOA,EACJ,2BAAIsC,GAAX,IAAiB/C,KAAM4C,IAEpBG,KAEXxC,KAAKG,SAAS,CAAC0B,MAAOS,M,8BAG1B,SAAiBpC,GACb,IAAMoC,EAAetC,KAAKT,MAAMsC,MAAMU,KAAI,SAAAC,GACtC,OAAGA,EAAKtC,KAAOA,EACJ,2BAAIsC,GAAX,IAAiBrB,WAAYqB,EAAKrB,YAE/BqB,KAEXxC,KAAKG,SAAS,CAAC0B,MAAOS,M,oBAI1B,WAAS,IAAD,OACET,EAAQ7B,KAAKT,MAAMsC,MAAMU,KAAI,SAAAC,GAC/B,OACA,cAAC,EAAD,CAEItC,GAAIsC,EAAKtC,GACTT,KAAM+C,EAAK/C,KACXQ,WAAY,EAAK8B,OACjBzB,WAAY,EAAK0B,OACjBb,UAAWqB,EAAKrB,UAChBT,WAAY,EAAKuB,kBANZO,EAAKtC,OAUlB,OACI,sBAAKY,UAAU,WAAf,UACI,6CAAe,+DAEf,cAAC,EAAD,CAAaU,WAAYxB,KAAK8B,SAC9B,6BAAKD,W,GAhEER,cCSRoB,E,4JATb,WACE,OACE,8BACE,cAAC,EAAD,U,GAJUpB,aCElBqB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.9f64220f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Todo.css\";\n// import { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n      task: this.props.task\n    };\n    this.handleRemove = this.handleRemove.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n  handleRemove() {\n    this.props.removeTodo(this.props.id);\n  }\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing });\n  }\n  handleUpdate(evt) {\n    evt.preventDefault();\n    //take new task data and pass up to parent\n    this.props.updateTodo(this.props.id, this.state.task);\n    this.setState({ isEditing: false });\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n  handleToggle(evt) {\n    this.props.toggleTodo(this.props.id);\n  }\n  render() {\n    let result;\n    if (this.state.isEditing) {\n      result = (\n        <div key='editing' timeout={500} classNames='form'>\n          <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\n            <input\n              type='text'\n              value={this.state.task}\n              name='task'\n              onChange={this.handleChange}\n            />\n            <button>Save</button>\n          </form>\n        </div>\n      );\n    } else {\n      result = (\n        <div key='normal' timeout={500} classNames='task-text'>\n          <li className='Todo-task' onClick={this.handleToggle}>\n            {this.props.task}\n          </li>\n        </div>\n      );\n    }\n    return (\n      <div\n        className={this.props.completed ? \"Todo completed\" : \"Todo\"}\n      >\n        {result}\n        <div className='Todo-buttons'>\n          <button onClick={this.toggleForm}>\n            <i class='fas fa-pen' />\n          </button>\n          <button onClick={this.handleRemove}>\n            <i class='fas fa-trash' />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Todo;\n","import React, { Component } from \"react\";\n// import uuid from \"uuid/v4\";\nimport {v4 as uuidv4 } from 'uuid'\n// uuidv4()\nimport \"./NewTodoForm.css\";\n\nclass NewTodoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { task: \"\" };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n  handleSubmit(evt) {\n    evt.preventDefault();\n    this.props.createTodo({ ...this.state, id: uuidv4(), completed: false });\n    this.setState({ task: \"\" });\n  }\n  render() {\n    return (\n      <form className='NewTodoForm' onSubmit={this.handleSubmit}>\n        <label htmlFor='task'>New Todo</label>\n        <input\n          type='text'\n          placeholder='New Todo'\n          id='task'\n          name='task'\n          value={this.state.task}\n          onChange={this.handleChange}\n        />\n        <button>Add Todo</button>\n      </form>\n    );\n  }\n}\nexport default NewTodoForm;\n","import React, { Component } from 'react'\nimport Todo from \"./Todo\"\nimport NewToDoForm from './NewTodoForm'\nimport './TodoList.css'\n\nclass TodoList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            todos: []\n        }\n        this.create=this.create.bind(this)\n        this.remove=this.remove.bind(this)\n        this.update=this.update.bind(this)\n        this.toggleCompletion=this.toggleCompletion.bind(this)\n    }\n\n    create(newTodo){\n        this.setState({\n            todos: [...this.state.todos, newTodo]\n        })\n    }\n\n    remove(id){\n        this.setState({\n            todos: this.state.todos.filter(t => t.id !== id)\n        })\n    }\n\n    update(id, updatedTask){\n        const updatedTodos = this.state.todos.map(todo => {\n            if(todo.id === id){\n                return {...todo, task: updatedTask}\n            }\n            return todo;\n        });\n        this.setState({todos: updatedTodos})\n    }\n\n    toggleCompletion(id){\n        const updatedTodos = this.state.todos.map(todo => {\n            if(todo.id === id){\n                return {...todo, completed: !todo.completed}\n            }\n            return todo;\n        });\n        this.setState({todos: updatedTodos})\n    }\n    \n\n    render(){\n        const todos = this.state.todos.map(todo => {\n            return (\n            <Todo \n                key={todo.id} \n                id={todo.id} \n                task={todo.task} \n                removeTodo={this.remove}\n                updateTodo={this.update}\n                completed={todo.completed}\n                toggleTodo={this.toggleCompletion}\n                />\n            );\n        });\n        return (\n            <div className='TodoList'>\n                <h1>To Do List <span>A simple React todo list</span></h1>\n  \n                <NewToDoForm createTodo={this.create}/>\n                <ul>{todos}</ul>\n                \n            </div>\n        )\n    }\n}\n\nexport default TodoList;","import './App.css';\nimport React, { Component } from 'react'\nimport TodoList from './TodoList'\n\nclass App extends Component {\n  render(){\n    return (\n      <div>\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n"],"sourceRoot":""}